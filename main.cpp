#include "BigInt.h"
#include <random>


// A: Triển khai hàm luỹ thừa module
// Hàm cần thực hiện: (base^exponent) % mod
BigInt modular_exponentiation(BigInt base, BigInt exponent, const BigInt& mod) 
{
    BigInt result = 1;  
    base = base % mod;  

    BigInt temp("0");

    while (exponent > temp)     // exponent > 0
    {
        if (exponent % 2 == 1) {
            result = (result * base) % mod;
        }
        base = (base * base) % mod;

        divide_by_2(exponent);  
    }
    return result;
}

int main() 
{

    // TEST
    BigInt base("123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789");  
    BigInt exponent("987654321987654321987654321987654321123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789");  
    BigInt mod("10000000000000000000000123456789123456789123456789123456789123456789123456789123456789123456789");  

    BigInt result = modular_exponentiation(base, exponent, mod);

    cout << "Result of (" << base << "^" << exponent << ") % " << mod << " is: " << result << endl;

    return 0;
}
